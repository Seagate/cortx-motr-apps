#/*
# * COPYRIGHT 2014 SEAGATE LLC
# *
# * THIS DRAWING/DOCUMENT, ITS SPECIFICATIONS, AND THE DATA CONTAINED
# * HEREIN, ARE THE EXCLUSIVE PROPERTY OF SEAGATE LLC,
# * ISSUED IN STRICT CONFIDENCE AND SHALL NOT, WITHOUT
# * THE PRIOR WRITTEN PERMISSION OF SEAGATE TECHNOLOGY LIMITED,
# * BE REPRODUCED, COPIED, OR DISCLOSED TO A THIRD PARTY, OR
# * USED FOR ANY PURPOSE WHATSOEVER, OR STORED IN A RETRIEVAL SYSTEM
# * EXCEPT AS ALLOWED BY THE TERMS OF SEAGATE LICENSES AND AGREEMENTS.
# *
# * YOU SHOULD HAVE RECEIVED A COPY OF SEAGATE'S LICENSE ALONG WITH
# * THIS RELEASE. IF NOT PLEASE CONTACT A SEAGATE REPRESENTATIVE
# * http://www.xyratex.com/contact
# *
# * Original author:  Ganesan Umanesan <ganesan.umanesan@seagate.com>
# * Original creation date: 10-Jan-2017
#*/

# Ganesan Umanesan <ganesan.umanesan@seagate.com>
# 10/02/2020 - Initial script
# 11/02/2020 - getchar function added
# 26/02/2020 - functions added
# 26/02/2020 - getoption added
# 27/02/2020 - paritygroup added
# 04/03/2020 - usage added
# 02/08/2020 - visnode added
# 21/08/2020 - datawarp added

#!/usr/bin/bash

#
# Glo1bal vars
#

# constants
readonly PROG_NAME=$(basename $0)

INTERACTIVE=0
WHOLESYSTEM=1
CLIENTS=''
CLIENTS+='client-2[1-8]',
CLIENTS+='visnode-0[1-4]',
CLIENTS+='datawarp-0[1-4]'
SERVERS=''
SERVERS+='sage-tier1-[1-2]',
SERVERS+='sage-tier2-[1-4]',
SERVERS+='sage-tier3-[1-1]'

#
# Functions
#

getchar()
{
	if [ "$INTERACTIVE" -eq 1 ]; then
	echo -n "Press key:"
	read -rn1
	fi
}

sshstat()
{
	echo "-[ ssh ]-"
	pdsh -w  "$CLIENTS" uname -r | sort
	getchar
	echo "-[ ssh ]-"
	pdsh -w  "$SERVERS" uname -r | sort
	getchar
}

motrrpms()
{
	echo "-[ motr rpm ]-"
	pdsh -w  "$CLIENTS" rpm -qa | grep cortx-motr-1 | sort
	getchar
	echo "-[ motr rpm ]-"
	pdsh -w  "$SERVERS" rpm -qa | grep cortx-motr-1 | sort
	getchar
}

harerpms()
{
	echo "-[ hare rpm ]-"
	pdsh -w  "$CLIENTS" rpm -qa | grep cortx-hare-1 | sort
	getchar
	echo "-[ hare rpm ]-"
	pdsh -w  "$SERVERS" rpm -qa | grep cortx-hare-1 | sort
	getchar
}

lnetrpms()
{
	echo "-[ lnet(clients) ]-"
	pdsh -w  "$CLIENTS"  rpm -q lustre-client-* | sort | cat -n
	pdsh -w  "$CLIENTS"  rpm -q lustre-client-devel-* | sort | cat -n
	pdsh -w  "$CLIENTS"  rpm -q kmod-lustre-client-* | sort | cat -n
	getchar
	echo "-[ lnet(servers) ]-"
	pdsh -w  "$SERVERS"  rpm -q lustre-client-* | sort | cat -n
	pdsh -w  "$SERVERS"  rpm -q lustre-client-devel-* | sort | cat -n
	pdsh -w  "$SERVERS"  rpm -q kmod-lustre-client-* | sort | cat -n
	getchar
}

lnetstat()
{
	echo "-[ lnet status(clients) ]-"
	pdsh -w  "$CLIENTS" sudo lnetctl net show 2> /dev/null | grep @lo | sort | cat -n
	pdsh -w  "$CLIENTS" sudo lnetctl net show 2> /dev/null | grep @tcp | sort | cat -n
	pdsh -w  "$CLIENTS" sudo lnetctl net show 2> /dev/null | grep @o2ib | sort | cat -n
	pdsh -w  "$CLIENTS" sudo lnetctl net show 2> /dev/null | sort
	getchar
	echo "-[ lnet status(servers) ]-"
	pdsh -w  "$SERVERS" sudo lnetctl net show 2> /dev/null | grep @lo | sort | cat -n
	pdsh -w  "$SERVERS" sudo lnetctl net show 2> /dev/null | grep @tcp | sort | cat -n
	pdsh -w  "$SERVERS" sudo lnetctl net show 2> /dev/null | grep @o2ib | sort | cat -n
	pdsh -w  "$SERVERS" sudo lnetctl net show 2> /dev/null | sort
	getchar
}

motrstat()
{
	echo "-[ Motr status(clients) ]-"
	ssh -A client-21 hctl status | grep client-
	ssh -A client-21 hctl status | grep visnode-
	ssh -A client-21 hctl status | grep datawarp-
	getchar
	echo "-[ Motr status(tier nodes) ]-"
	ssh -A client-21 hctl status | grep sage-tier
	getchar
	echo "-[ Motr status(pools) ]-"
	ssh -A client-21 hctl status | grep -A4 'Data pools'
}

format()
{
	input=$(cat)
	input=$(echo "$input" | sed 's/[[:space:]]*//g')
	input=$(echo "$input" | awk -F: 'NF!=0 {printf("%s %s\t" (/size/?RS:FS),$1,$2); if(/group/) printf("\n")}')
	input=$(echo "$input" | sed 's/://g')
	echo "$input"
}

paritygroup()
{
	echo "-[ Parity group ]-"
	ssh -A sage-tier1-1 cat /etc/halon/halon_facts.yaml | grep -E "_units|unit_|pool_id" | format
	getchar
}

#
# Usage
#

usage()
{
    cat <<USAGE_END
Usage: $(basename $0) [-h|--help] [options]
	
    -i|--interactive   	interactive mode. prints a set of ouputs
                        waits for any key press to continue.

    -s|--ssh       	ssh access.
    			output uname -r

    -r|--rpms   	print installed rpm packages
    			motr, halon and lnet rpms are printed.

    -l|--lnet   	print installed rpm packages
    			motr, halon and lnet rpms are printed.

    -m|--motr   	print motr status
    			clients and tier-nodes online statuses are printed.
    			Also printed are pool parameters.

    -p|--paritygroup   	print parity group information
    			pool name, N, P, K values are printed.

    -h|--help           Print this help screen.
USAGE_END

	exit 1
}

#
# MAIN
#

# Note that we use `"$@"' to let each command-line parameter expand to a
# separate word. The quotes around `$@' are essential!
# We need TEMP as the `eval set --' would nuke the return value of getopt.
TEMP=$( getopt -o isrlmph --long interactive,ssh,rpms,lnet,motr,paritygroup,help \
        -n "$PROG_NAME" -- "$@" )

[[ $? != 0 ]] && usage

echo '#####'
date
echo '#####'

# Note the quotes around `$TEMP': they are essential!
eval set -- "$TEMP"

while true ; 
	do
    case "$1" in
        -i|--interactive)           
       	INTERACTIVE=1
      	shift
       	;;
       	-s|--ssh)
       	WHOLESYSTEM=0
      	sshstat
      	shift
     	;;
     	-r|--rpms)
       	WHOLESYSTEM=0
       	motrrpms
       	harerpms
       	lnetrpms
     	shift
      	;;
     	-l|--lnet)
       	WHOLESYSTEM=0
    	lnetstat
     	shift
    	;;
     	-m|--motr)
       	WHOLESYSTEM=0
    	motrstat
    	shift
    	;;  	
     	-p|--paritygroup)
       	WHOLESYSTEM=0
    	paritygroup
    	shift
    	;;  	
     	-h|--help)
       	WHOLESYSTEM=0
    	usage
    	shift
    	;;  	
		--)     
       	shift
     	break 
     	;;
    	*)
      	echo 'getopt: internal error...'
      	exit 1 
      	;;
   	esac
    done

# do all if no options
if [ $WHOLESYSTEM -eq 1 ]; then
	sshstat
	motrrpms
	harerpms
	lnetrpms
	lnetstat
	motrstat
fi

echo '#####'
echo "Done."
echo '#####'
